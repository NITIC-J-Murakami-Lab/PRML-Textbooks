Traceback (most recent call last):
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/mriki/.rye/py/cpython@3.11.8/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/mriki/workspace/prpy/.venv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# クラスを実装するセル

def kmeans(X, K:int=3, N:int=100):
    D,F = X.shape # インスタンス数 ✖️ 特徴数
    labels = np.random.randint(0,K,size=D)
    centroids = np.zeros((K,F))
    for k in range(K): 
        centroids[k] = X[labels==k].mean(axis=0)
    for i in range(N):
        _labels = labels
        distance = np.linalg.norm(centroids[None,:,:] - X[:,None,:],axis=-1)
        print(distance.shape)
        labels = np.argmin(distance,axis=-1)
        for k in range(K): 
            centroids[k] = X[labels==k].mean(axis=0)
        if (_labels == labels).sum() == D:
            break    
    return labels

def kmeans(X, K:int=3, N:int=100, eps:float=1e-7):
    D,F = X.shape # インスタンス数 ✖️ 特徴数
    labels = np.random.randint(0,K,size=D)
    centroids = np.zeros((K,F))
    for k in range(K): 
        centroids[k] = X[labels==k].mean(axis=0)
    for i in range(N):
        _labels = labels
        #distance = np.linalg.norm(centroids[None,:,:] - X[:,None,:],axis=-1)
        distance = np.zeros((D,K))
        for d in range(D):
            for k in range(K):
                distance[d,k] = np.sum((X[d]-centroids[k])**2)**(1/2)
        labels = np.argmin(distance,axis=-1)
        for k in range(K): 
            centroids[k] = X[labels==k].mean(axis=0)
        if (_labels == labels).sum() == D:
            break    
    return labels

"""
distance = np.zeros((D,K))
for d in range(D):
    for k in range(K):
        distance[d,k] = np.sum((X[d]-centroids[k])**2)**(1/2)
""";
kmeans(X)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[23], line 46[0m
[1;32m     38[0m     [38;5;28;01mreturn[39;00m labels
[1;32m     40[0m [38;5;124;03m"""[39;00m
[1;32m     41[0m [38;5;124;03mdistance = np.zeros((D,K))[39;00m
[1;32m     42[0m [38;5;124;03mfor d in range(D):[39;00m
[1;32m     43[0m [38;5;124;03m    for k in range(K):[39;00m
[1;32m     44[0m [38;5;124;03m        distance[d,k] = np.sum((X[d]-centroids[k])**2)**(1/2)[39;00m
[1;32m     45[0m [38;5;124;03m"""[39;00m;
[0;32m---> 46[0m kmeans([43mX[49m)

[0;31mNameError[0m: name 'X' is not defined

